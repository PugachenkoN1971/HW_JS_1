Метод concat() объединяет текст из двух или более строк и возвращает новую строку.
Метод toLowerCase() возвращает значение строки, на которой он был вызван, преобразованное в нижний регистр.
Метод toUpperCase() возвращает значение строки, на которой он был вызван, преобразованное в верхний регистр.
Метод endsWith() позволяет определить, заканчивается ли строка символами указанными в скобках, возвращая, соответственно, true или false.
Метод startsWith() помогает определить, начинается ли строка с символов указанных в скобках, возвращая, соответственно, true или false.
Метод charAt() возвращает указанный символ из строки. Входящий параметр - индекс элемента в массиве.
Метод includes() проверяет, содержит ли строка заданную подстроку, и возвращает, соответственно true или false.
Метод indexOf() возвращает индекс первого вхождения указанного значения в строковый объект String, на котором он был вызван, 
                начиная с индекса fromIndex. Возвращает -1, если значение не найдено.
Метод lastIndexOf() возвращает индекс последнего вхождения указанного значения в строковый объект String, на котором он был 
                     вызван, или -1, если ничего не было найдено. Поиск по строке ведётся от конца к началу, начиная с индекса fromIndex.
Метод replace() возвращает новую строку с некоторыми или всеми сопоставлениями с шаблоном, заменёнными на заменитель. Шаблон может быть 
                 строкой или регулярным выражением, а заменитель может быть строкой или функцией, вызываемой при каждом сопоставлении.
Метод replaceAll() возвращает новую строку со всеми совпадениями pattern , который меняется на replacement. pattern может быть строкой
                    или регулярным выражением, и replacement может быть строкой или функция возвращающая каждое совпадение.				
Метод substring() возвращает подстроку строки между двумя индексами, или от одного индекса и до конца строки.
Метод split() разбивает объект String на массив строк путём разделения строки указанной подстрокой.





// String methods
    // String.prototype.concat()
    // String.prototype.toLowerCase()
    // String.prototype.toUpperCase()
    // String.prototype.endsWith()
    // String.prototype.startsWith()
    // String.prototype.charAt()
    // String.prototype.includes()
    // String.prototype.indexOf()
    // String.prototype.lastIndexOf()
    // String.prototype.replace()
    // String.prototype.replaceAll()
    // String.prototype.substring()
    // String.prototype.split()




Метод pop() удаляет последний элемент из массива и возвращает его значение.
Метод push() добавляет один или более элементов в конец массива и возвращает новую длину массива.
Метод shift() удаляет первый элемент из массива и возвращает его значение. Этот метод изменяет длину массива.
Метод unshift() добавляет один или более элементов в начало массива и возвращает новую длину массива.
Метод join() объединяет все элементы массива (или массивоподобного объекта) в строку.
Метод concat() возвращает новый массив, состоящий из массива, на котором он был вызван, соединённого с 
               другими массивами и/или значениями, переданными в качестве аргументов.
Метод reverse() на месте обращает порядок следования элементов массива. Первый элемент 
                  массива становится последним, а последний — первым.
Метод indexOf() возвращает первый индекс, по которому данный элемент может быть найден 
                 в массиве или -1, если такого индекса нет.
Метод splice() изменяет содержимое массива, удаляя существующие элементы и/или добавляя новые.
Метод includes() определяет, содержит ли массив определённый элемент, возвращая в зависимости 
                  от этого true или false.
Метод forEach() выполняет указанную функцию один раз для каждого элемента в массиве.
Метод filter() создаёт новый массив со всеми элементами, прошедшими проверку, задаваемую 
                в передаваемой функции.
Метод map() создаёт новый массив с результатом вызова указанной функции для каждого элемента массива.
Метод sort() на месте сортирует элементы массива и возвращает отсортированный массив. Сортировка не 
              обязательно устойчива (англ.). Порядок сортировки по умолчанию соответствует порядку 
			  кодовых точек Unicode.
Метод find() возвращает значение первого найденного в массиве элемента, которое удовлетворяет условию 
                    переданному в callback функции.  В противном случае возвращается undefined.
Метод every() проверяет, удовлетворяют ли все элементы массива условию, заданному в передаваемой функции.
Метод some() проверяет, удовлетворяет ли какой-либо элемент массива условию, заданному в передаваемой функции.
Метод flat() возвращает новый массив, в котором все элементы вложенных подмассивов были рекурсивно "подняты" 
               на указанный уровень depth.
Метод flatMap() сначала применяет функцию к каждому элементу, а затем преобразует полученный результат в 
                 плоскую структуру и помещает в новый массив. Это идентично map функции, с последующим 
				 применением функции flat с параметром depth ( глубина ) равным 1, но flatMap часто бывает 
				 полезным, так как работает немного более эффективно.
Метод reduce() применяет функцию reducer к каждому элементу массива (слева-направо), возвращая одно 
                результирующее значение.


    // Array.isArray()
    // Array.prototype.push()
    // Array.prototype.pop()
    // Array.prototype.shift()
    // Array.prototype.unshift()
    // Array.prototype.join()
    // Array.prototype.concat()
    // Array.prototype.reverse()
    // Array.prototype.indexOf()
    // Array.prototype.splice()
    // Array.prototype.includes()

    // Array.prototype.forEach()
    // Array.prototype.filter()
    // Array.prototype.map()
    //
    // Array.prototype.sort()
    // Array.prototype.find()
    // Array.prototype.every()
    // Array.prototype.some()
    // Array.prototype.flat()
    // Array.prototype.flatMap()
    // Array.prototype.reduce()
    
    
     console.log(users.reduce((basket, user) => {
        if (user.status) {
            basket.statusTrue.push(user);
        } else {
            basket.statusFalse.push(user);

        }
        return basket;

    }, {statusTrue: [], statusFalse: []}));
